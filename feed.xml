<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://k45v.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://k45v.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-05-15T02:48:56+00:00</updated><id>https://k45v.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">Extending Cache Replacement Policies OF GPGPU-Sim (SRRIP, BRRIP, LFU)</title><link href="https://k45v.github.io/blog/2013/gpgpusim/" rel="alternate" type="text/html" title="Extending Cache Replacement Policies OF GPGPU-Sim (SRRIP, BRRIP, LFU)" /><published>2013-04-28T00:00:00+00:00</published><updated>2013-04-28T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2013/gpgpusim</id><content type="html" xml:base="https://k45v.github.io/blog/2013/gpgpusim/"><![CDATA[]]></content><author><name></name></author><category term="Papers" /><category term="Parallel Computing" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">GPGPU simulator installation on Ubuntu 12.04 for a system without NVIDIA Graphics card</title><link href="https://k45v.github.io/blog/2013/gpuocelot/" rel="alternate" type="text/html" title="GPGPU simulator installation on Ubuntu 12.04 for a system without NVIDIA Graphics card" /><published>2013-04-25T00:00:00+00:00</published><updated>2013-04-25T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2013/gpuocelot</id><content type="html" xml:base="https://k45v.github.io/blog/2013/gpuocelot/"><![CDATA[<p>Computation intensive applications which have high degree of data-level parallelism can very well harness the hardware capabilities provided a GPU. Enter the term <a href="http://en.wikipedia.org/wiki/GPGPU">GPGPU</a>.</p>

<p>You might want to try out the Parallel Computing platform <a href="http://www.nvidia.com/object/cuda_home_new.html">CUDA</a> to gauge what kind of speed-up you can achieve in you current code by running it on a GPU. I wanted to use CUDA for one of my class projects but I do not have a compatible graphics card. Mine is an Intel Mobile 4 Series Chipset Integrated Graphics Controller, you can check yours using the command:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lspci | <span class="nb">grep </span>VGA
</code></pre></div></div>
<p>I spent a lot of time trying to install a GPU emulator but either I got stuck in some library dependency, or some of the downloaded packages were dependent on older gcc versions. The documentation online for installing emulators in systems which do not have a graphics card was insufficient. Finally, using few magical keywords in my Google search I located this <a href="http://barefeg.wordpress.com/2012/06/16/how-to-install-gpuocelot-in-ubuntu-12-04/">blog entry</a> which provided detailed installation procedure for the <a href="http://code.google.com/p/gpuocelot/">gpuocelot</a>.</p>

<p>Here, I provide my version of the installation procedure to get a simple “Hello World” program up and running using GPGPU emulator.</p>

<ol>
  <li>Download the “CUDA Toolkit for Ubuntu Linux 10.10” from <a href="https://developer.nvidia.com/cuda-toolkit-40">here</a> (v 4.0). Now start terminal (using ctrl + alt + t) and navigate to your Downloads directory. Change permissions for the installation file (mine was for 32bit) and install it. Hit enter if it asks for a change of destination directory.
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ./cudatoolkit_4.0.17_linux_32_ubuntu10.10.run
<span class="nb">sudo</span> ./cudatoolkit_4.0.17_linux_32_ubuntu10.10.run
</code></pre></div>    </div>
  </li>
  <li>Next install gcc and g++ v4.4 and update alternatives and priorities for gcc versions
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>gcc-4.4
<span class="nb">sudo </span>apt-get <span class="nb">install </span>g++-4.4
<span class="nb">sudo </span>update-alternatives <span class="se">\</span>
<span class="nt">--install</span> /usr/bin/gcc gcc /usr/bin/gcc-4.6 40 <span class="se">\</span>
<span class="nt">--slave</span> /usr/bin/g++ g++ /usr/bin/g++-4.6
<span class="nb">sudo </span>update-alternatives <span class="se">\</span>
<span class="nt">--install</span> /usr/bin/gcc gcc /usr/bin/gcc-4.4 60 <span class="se">\</span>
<span class="nt">--slave</span> /usr/bin/g++ g++ /usr/bin/g++-4.4
<span class="nb">sudo </span>update-alternatives <span class="nt">--config</span> gcc
</code></pre></div>    </div>
    <p>Now select the version 4.4 (usually item 0). Check the current version using</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc <span class="nt">--version</span>
</code></pre></div>    </div>
  </li>
  <li>Now you need to update the paths in your bashrc file
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.bashrc
</code></pre></div>    </div>
    <p>In vi editor enter “G” to go to the end of file, then “i” to add data. Copy paste the lines below</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/cuda/bin
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/usr/local/cuda/lib:/usr/local/lib
<span class="nb">export </span><span class="nv">CPLUS_INCLUDE_PATH</span><span class="o">=</span>/usr/local/cuda/include
</code></pre></div>    </div>
    <p>Now enter “:wq” to save and exit. Update the sources using</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc
</code></pre></div>    </div>
    <p>The CUDA setup is completed now and you can check using the command</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvcc <span class="nt">--version</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Next download the following files:<br />
libboost-filesystem1.42.0_1.42.0-4ubuntu2_i386.deb from <a href="https://launchpad.net/ubuntu/oneiric/+package/libboost-filesystem1.42.0">here</a><br />
libboost-system1.42.0_1.42.0-4ubuntu2_i386.deb from <a href="https://launchpad.net/ubuntu/precise/+package/libboost-system1.42.0">here</a> and<br />
libboost-thread1.42.0_1.42.0-4ubuntu2_i386.deb from <a href="https://launchpad.net/ubuntu/oneiric/+package/libboost-thread1.42.0">here</a>.<br />
I selected libboost-* in i386 (Release) and then downloaded the *.deb file below the Downloadable files section. Install by double clicking (it should open in the ubuntu software center, select install there).</p>
  </li>
  <li>Finally, download gpuocelot from <a href="http://code.google.com/p/gpuocelot/downloads/list">here</a>. I chose ocelot_2.1.1272_i386.deb. Install by double clicking.</li>
</ol>

<h2 id="hello-world">Hello World</h2>
<ol>
  <li>
    <p>Navigate to your home directory and create a folder hellocuda. Download the configuration file from <a href="https://docs.google.com/file/d/0B5Ve5IFK3KWxeHdsQzM2MGdtOW8/edit">here</a> and the Hello World program from <a href="https://docs.google.com/file/d/0B5Ve5IFK3KWxY0dWMXZ6b0hoZWc/edit">here</a>. Place both these files in the hellocuda directory. You may go through <a href="http://code.google.com/p/gpuocelot/wiki/OcelotConfigFile">this page</a> to understand the configuration file.</p>
  </li>
  <li>
    <p>Now compile the code</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvcc <span class="nt">-c</span> hello.cu <span class="nt">-arch</span><span class="o">=</span>sm_20
g++ <span class="nt">-o</span> hello.out hello.o <span class="sb">`</span>OcelotConfig <span class="nt">-l</span><span class="sb">`</span>
</code></pre></div>    </div>
    <p>Next run it using</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./hello.out
</code></pre></div>    </div>
    <p>This code computes the dot product of two vectors a and b using the GPU (in our case on the CPU using emulation) and stores the result in c. The final output shows the result of the computation performed using GPU and CPU respectively.</p>
  </li>
</ol>]]></content><author><name></name></author><category term="Parallel Computing" /><summary type="html"><![CDATA[Computation intensive applications which have high degree of data-level parallelism can very well harness the hardware capabilities provided a GPU. Enter the term GPGPU.]]></summary></entry><entry><title type="html">Vim, Ctags and Cscope</title><link href="https://k45v.github.io/blog/2013/vim/" rel="alternate" type="text/html" title="Vim, Ctags and Cscope" /><published>2013-04-20T00:00:00+00:00</published><updated>2013-04-20T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2013/vim</id><content type="html" xml:base="https://k45v.github.io/blog/2013/vim/"><![CDATA[<p>You have been given a project folder with the code spread over multiple files (maybe even nested in sub-folders). Now, you wish to add a new feature to this project. But before you can start scribbling down your algorithm and making changes, you need to understand the code. Vim coupled with Ctags and Cscope can help you do exactly that. Ctags helps you jump from function/symbol instances to their definitions and Cscope does the opposite i.e. you can see the entire call hierarchy of a particular function (where all the function is called). The tutorials for setting up Cscope were a bit tricky and I wanted to document my set of steps here. So here is how to set up your tools:</p>

<ol>
  <li>The Vim editor<br />
Install using:
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>vim
</code></pre></div>    </div>
    <p>I am assuming you know how to use vim. If not then there are plenty of tutorials on the internet to get you started with vim.</p>
  </li>
  <li>Ctags
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>exuberant-ctags
</code></pre></div>    </div>
    <p>After installing ctags, navigate inside the project folder and do</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctags <span class="nt">-R</span> ./<span class="k">*</span>
</code></pre></div>    </div>
    <p>This will generate tags (they help you find the function definitions from their instances) for your entire code. Now from this same directory (do not change your directory), open a code file in vim</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ./main.c
</code></pre></div>    </div>
    <p>Say inside your main code you see a call to function “calculate” which is defined in some other file in your current folder (or sub-folder). Then move your cursor over “calculate” and press the CTRL; while keeping CTRL pressed hit ] key. You’ll find yourself in the function definition of “calculate”. We’ll call this pressing of CTRL and then ] key while holding CTRL down as CTRL+]. To go back use CTRL+t.</p>
  </li>
  <li>Cscope<br />
Install cscope
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>cscope
</code></pre></div>    </div>
    <p>Now open/create a “.vimrc” file in you home directory using:</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.vimrc
</code></pre></div>    </div>
    <p>Append the following in this file</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if </span>has<span class="o">(</span><span class="s2">"cscope"</span><span class="o">)</span>
    <span class="nb">set </span><span class="nv">csprg</span><span class="o">=</span>/usr/bin/cscope
    <span class="nb">set </span><span class="nv">csto</span><span class="o">=</span>0
    <span class="nb">set </span>cst
    <span class="nb">set </span>nocsverb
    <span class="s2">" add any database in current directory
        if filereadable("</span>cscope.out<span class="s2">")
                cs add cscope.out
                        "</span> <span class="k">else </span>add database pointed to by environment
                            elseif <span class="nv">$CSCOPE_DB</span> <span class="o">!=</span> <span class="s2">""</span>
        cs add <span class="nv">$CSCOPE_DB</span>
    endif
endif
   
nmap &lt;C-<span class="se">\&gt;</span>s :cs find s <span class="o">=</span><span class="nb">expand</span><span class="o">(</span><span class="s2">""</span><span class="o">)</span>
nmap &lt;C-<span class="se">\&gt;</span>g :cs find g <span class="o">=</span><span class="nb">expand</span><span class="o">(</span><span class="s2">""</span><span class="o">)</span>
nmap &lt;C-<span class="se">\&gt;</span>c :cs find c <span class="o">=</span><span class="nb">expand</span><span class="o">(</span><span class="s2">""</span><span class="o">)</span>
nmap &lt;C-<span class="se">\&gt;</span>t :cs find t <span class="o">=</span><span class="nb">expand</span><span class="o">(</span><span class="s2">""</span><span class="o">)</span>
nmap &lt;C-<span class="se">\&gt;</span>e :cs find e <span class="o">=</span><span class="nb">expand</span><span class="o">(</span><span class="s2">""</span><span class="o">)</span>
nmap &lt;C-<span class="se">\&gt;</span>f :cs find f <span class="o">=</span><span class="nb">expand</span><span class="o">(</span><span class="s2">""</span><span class="o">)</span>
nmap &lt;C-<span class="se">\&gt;</span>i :cs find i ^<span class="o">=</span><span class="nb">expand</span><span class="o">(</span><span class="s2">""</span><span class="o">)</span><span class="err">$</span>
nmap &lt;C-<span class="se">\&gt;</span>d :cs find d <span class="o">=</span><span class="nb">expand</span><span class="o">(</span><span class="s2">""</span><span class="o">)</span>
   
<span class="nb">set </span>nohlsearch
</code></pre></div>    </div>
  </li>
</ol>

<p>In your code folder do</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cscope <span class="nt">-Rb</span>
</code></pre></div></div>
<p>Open a file, say main.c and take your cursor on a function name and press CTRL; while holding down CTRL press \ key, now release both and hit c. So the combo will be CTRL+\ (release both) c. It should now show you where all this function has been called. If the list is long, hit q and type the number where you want to go. To return from here use CTRL+t.
In order to look for a symbol (variable name) use the combo CTRL+\ (release both) s. You can make out the other combos from the nmap statements in the .vimrc file.</p>

<p>These tools can prove to be extremely useful in case you are working on a server or a machine with limited resources. Alternatively you can use Eclipse with the CDT bundle.</p>

<p>If you wish to use Eclipse with the CDT bundle to explore/edit code which is on a remote system then you can mount the remote directory using the command:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sshfs login@remote.server.ip:/path/to/remote/directory /path/to/local/directory/or/mount/point
fusermount <span class="nt">-u</span> /path/to/mount/point/for/unmounting
</code></pre></div></div>
<p>Another alternative to access remote files using eclipse would be to install the Eclipse RSE plugin. For this, simply search for eclipse RSE and download the latest stable release. Copy the contents of features and plugins directory into corresponding eclipse folder (eclipse installation folder in windows and .eclipse folder at linux home). Launch eclipse now and then Window -&gt; Show view -&gt; Other -&gt; Remote systems -&gt; remote systems. Right click local and select New -&gt; connection. Enter IP, select ssh.files, processes.shell.linux, ssh.shells, ssh.terminals. Finish. Select sftp files, My Home. Enter password when prompted! Voila, you can now access files over network. What’s more, you can right click ssh terminals and select launch terminal within eclipse to compile/test your code.</p>

<h2 id="appendix">Appendix</h2>

<p>My Vim cheat sheet:
This is a list of commands which I most frequently use on vim</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>i to insert
:wq save and quit
:tabe path/filename to open in new tab
:set mouse =a to use mouse
:tabn or :tabp to move between tabs or simply click
:wa save all open tabs
/string to search
gg move to top
GG move to bottom
A append at end of line
yy copy/yank one line
y3 copy 3lines
p paste at end of current line
Cut a section of words:- v to begin selecting, d to end and cut, p to paste
</code></pre></div></div>]]></content><author><name></name></author><category term="Linux" /><summary type="html"><![CDATA[You have been given a project folder with the code spread over multiple files (maybe even nested in sub-folders). Now, you wish to add a new feature to this project. But before you can start scribbling down your algorithm and making changes, you need to understand the code. Vim coupled with Ctags and Cscope can help you do exactly that. Ctags helps you jump from function/symbol instances to their definitions and Cscope does the opposite i.e. you can see the entire call hierarchy of a particular function (where all the function is called). The tutorials for setting up Cscope were a bit tricky and I wanted to document my set of steps here. So here is how to set up your tools:]]></summary></entry><entry><title type="html">The eXtreme Computer Design Competition 2013</title><link href="https://k45v.github.io/blog/2013/xcdc/" rel="alternate" type="text/html" title="The eXtreme Computer Design Competition 2013" /><published>2013-04-05T00:00:00+00:00</published><updated>2013-04-05T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2013/xcdc</id><content type="html" xml:base="https://k45v.github.io/blog/2013/xcdc/"><![CDATA[<div class="float-left mr-3 w-50">
  <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/img_2395-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/img_2395-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/img_2395-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/img_2395.jpg" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

</div>
<p>It has been quite some time since I participated in a competition (2010 was the last time @ <a href="/blog/2010/daq/">FSG</a>). I had been waiting for the <a href="https://sites.google.com/a/ncsu.edu/xcdc2013/home">XCDC2013</a> and what an amazing experience it was!!!</p>

<p>I learn’t a lot and thoroughly enjoyed the team work. It was like a symphony. Spending hours with my team mates Bharat and Roshan, sprouting new approaches and bouncing ideas off each other. I can never forget that moment when at 2am in the Hunt library we managed to Overclock the Snapdragon S3 (APQ8060) on the <a href="https://developer.qualcomm.com/mobile-development/development-devices/snapdragon-mdp-legacy-devices">MSM8660</a> (Dragonboard) and there were high fives all around. In this blog post I will try to cover everything what we did/tried for this event. (The <a href="#appendix">Appendix section</a> has all the detailed procedures)</p>

<p><strong>Problem Statement:</strong> Optimize the Page load speed of a web browser on the platform previously mentioned. We had to improve both performance and energy efficiency.</p>

<p>Before we begin the optimizations/changes we need to know how to measure the performance and energy efficiency. So, we decided to rely on the following tools:</p>

<ul>
  <li><strong>Browser benchmarks:</strong> Use the benchmarks mentioned <a href="http://wikis.lib.ncsu.edu/index.php/XCDC_Android_Development#Browser_Benchmarks">here</a> to check page load times for your browser. Okay now go use <a href="http://www.webkit.org/perf/sunspider-0.9.1/sunspider-0.9.1/driver.html">this link</a> to see which out of Chrome, IE and Firefox is fastest on your PC… No seriously, try it out.</li>
  <li><strong>DDMS/Traceview:</strong> Dalvik Debug Monitor Server (DDMS) is accessible via Eclipse and is present in the <a href="http://developer.android.com/sdk/index.html">ADT bundle</a> tools section. It can be used to generate trace logs for applications/processes running on the target device. Use this to determine the costliest sections of the application.</li>
  <li><strong>Perf:</strong> The <a href="https://perf.wiki.kernel.org/index.php/Tutorial">perf</a> tool can be used for recording process activity information. Most of the frequently invoked code is written in native C. This is where perf comes in. The names of functions in perf reports are generated by JNI and they can be correlated with the corresponding “.so” (shared object files) shown in perf report. You can look for these functions in the source code for modifications. Additionally, you may check the hardware counters using perf (if enabled).</li>
  <li><strong>Trepn Profiler:</strong> This tool has been designed by Qualcomm to measure effects of an application on the mobile device’s power, data and CPU. The MDP (Mobile development platform) has embedded sensors which are used by <a href="https://developer.qualcomm.com/mobile-development/development-devices/trepn-profiler">trepn</a> to gather the required information and it allows saving all gathered data to a csv file.</li>
  <li><strong>AnTuTu Benchmark:</strong> The AnTuTu benchmark is an android app which gauges performance based on different tests. Though this does not measure browser performance, it is useful to determine general purpose performance.</li>
</ul>

<p>The MDP came with a stock gingerbread image. We ran the stock Android browser through the <a href="#perf-based-profiling">Profiling procedure</a> and collected data. Next we <a href="#flash-ics-stock-image-provided-by-bsquare-using-windows7">flashed Ice cream sandwich</a> on the MDP so that we can work on the Browser in the latest Android flavor compatible with the MDP. Then we profiled again to collect baseline data on ICS. Just upgrading to ICS gave a speedup of around 2 (compared to gingerbread baseline). We <a href="#compiling-ics-from-source">pulled the ICS source and compiled it</a> ( had some snacks, took a break, fixed some errors…this part over and over again) on 32-bit Ubuntu 12.04  and a MAC OSX 10.8.3.</p>

<p>Now came the interesting part OPTIMIZATIONS!!!</p>

<p>A look at the Sunspider trace collected from DDMS showed that the browser package is nowhere near the costliest sections. The major chunk of time is spent in Timer handling code which belongs to the Webcore package. Time to do a grep in the Kernel source. The outcome: we located frameworks/base/core/java/android/webkit/JWebCoreJavaBridge.java (Note that for all paths hereon we are in the ICS source directory that was pulled) where the method code was present. Then Surpiiissseee, the file is a bridge which provides interface for functions implemented in native C. Okay so now to look for the C code and we ended up at external/webkit/Source/WebKit/android/jni/JavaBridge.cpp . The code is small, the underlying functions are small and offer no avenues for the optimizations we had in mind (removing dependencies, vectorizing code for the Neon SIMD unit). Back to hunting for places to optimize. Next we found the code responsible for triggering shared timers. We reduced the max duration of firing timers at external/webkit/Source/WebCore/platform/ThreadTimers.cpp  in the webkit code. This just slowed the benchmarks down and we later figured out that this timer changes the interval at which next computation will be processed by Webkit <a href="http://homes.cs.washington.edu/~burg/projects/timelapse/articles/webkit-event-implementation/">(details here)</a>.</p>

<p>At this point we were going nowhere and just jumping from one function to another to find a small piece of code in every one of them. That’s when Bharat said let’s do kernel modifications. But where would we start? He proposed using a kernel module to overclock the processor <a href="http://forum.xda-developers.com/showthread.php?t=1158951">(refer this link)</a>. <a href="#permitting-apps-to-use-root">(Here is how we set up the needed apps)</a>. Well it was a new approach, we thought it’s worth a shot and began compiling the KMOD <a href="#makefile-to-compile-kmod-for-android-ics-source">(makefile here)</a>. Locating the kernel source directory and fixing the makefile was another challenge. We pulled Linux kernel and used that directory as source but it asked for configurations. Then we tried default configurations using “make menuconfig” and “make oldconfig”. No luck. A modinfo showed inconsistency in the vermagic. Finally found the exact source directory and did insmod successfully. The MDP rebooted! Tried another set of configurations another reboot and no messages using dmesg or logcat. Finally found kernel messages by doing “cat /proc/kmsg”. The module simply looked for for the voltage setting and replaced any entry in memory that matched the unsigned long value 1250000 with an appropriately different value. There was a illegal memory access which causes the Kernel oops, so we moved the start address for the lookup. Luckily the module got inserted for 1.5GHz setting (max frequency previously was 1.2GHz) and we ran the benchmark. We expected a speedup but instead the performance dropped by half. Maybe there was a mismatch in the L2, RAM and CPU frequency or the module replaced values in some other locations as well which had adverse affects on the system.</p>

<p>Down but not out, we decided to look into the kernel source to find matching functions and located the tables responsible for the clock setup and PLL (kernel/arch/arm/mach-msm/acpuclock-8×60.c). Bingo, went through the code, added entries, compiled and flashed. Checked the MDP. Yes! the changes reflected. Ran the benchmarks. Did it work? See for yourself:</p>

<div class="text-center">
<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/performance_speedup-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/performance_speedup-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/performance_speedup-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/performance_speedup.png" class="img-fluid rounded w-75" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Browser speedup for benchmarks</figcaption>

</figure>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/results_antutu-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/results_antutu-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/results_antutu-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/results_antutu.png" class="img-fluid rounded w-75" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Antutu scores (higher means better)</figcaption>

</figure>

</div>

<p>We presented out results and bagged the 3rd spot at the competition. Why not 1st? Well we overclocked the MDP, but then that reduces battery life. The scheduler and high-low frequencies at kernel level have been designed to give the best experience both in terms of performance and energy consumption. So, if we had concentrated more on the browser source (Chrome or <a href="https://wiki.mozilla.org/Mobile/Fennec/Android">Fennec</a>; we did compile source for Fennec which took about 7 hours on my system) maybe the results would have been different. Well, in that case we wouldn’t have overclocked the system right? In short what we did was definitely worth it!</p>

<p>With that ended our attempt at XCDC 2013 !!!</p>

<h2 id="appendix">Appendix</h2>

<h4 id="perf-based-profiling">Perf based profiling</h4>
<p>We used the precompiled perf made available on <a href="http://www.spencerpages.com/wiki/index.php?title=Dragonboard_8060_Development#Using_pre-compiled_perf">spencerpages wiki</a>.</p>
<ol>
  <li>Manually start the browser and note pid using:-
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell ps | <span class="nb">grep </span>browser
</code></pre></div>    </div>
  </li>
  <li>Start the desired web page through adb shell
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>am start <span class="nt">-a</span> android.intent.action.VIEW <span class="nt">-d</span> <span class="se">\</span>
http://www.webkit.org/perf/sunspider-0.9.1/sunspider-0.9.1/driver.html <span class="se">\</span>
<span class="nt">-n</span> com.android.browser/.BrowserActivity
</code></pre></div>    </div>
  </li>
  <li>Steps to initialize ‘perf’
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PERF_PAGER</span><span class="o">=</span>/system/bin/cat
</code></pre></div>    </div>
    <p>for Gingerbread image use <code class="language-plaintext highlighter-rouge">#: perf record -p</code><br />
for ICS use (since hardware events not enabled) <code class="language-plaintext highlighter-rouge">#: perf record -e cpu-clock -F 500 -p</code></p>
  </li>
  <li>Run the Benchmark through the device</li>
  <li>When the benchmark run completes, kill ‘perf’ using ‘ctrl+c’</li>
  <li>Note the benchmark result that is being shown on the device</li>
  <li>The collected perf data can be viewed by using the command
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perf report
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="trepn-profiling">Trepn profiling</h4>
<ol>
  <li>Install Trepn using the instructions provided at the <a href="https://developer.qualcomm.com/mobile-development/development-devices/trepn-profiler">official site</a>.</li>
  <li>After installation, open the Trepn Profiler App and in settings select the parameters that you wish to record. Then select “Profile an app” -&gt; select “Browser”.</li>
  <li>This will open the browser and the profiler will start collecting data.</li>
  <li>Open the various sites that are to be tested using the adb shell.</li>
  <li>After the benchmarks have completed, open Trepn Profiler again and select “Stop Profiling”. At this point, it will ask you whether you want to save the data collected in the current session. The data can be saved as a .csv and ‘pull’ed to your machine for further analysis.</li>
</ol>

<h4 id="ddms-profiling">DDMS profiling</h4>
<ol>
  <li>Follow the next few steps just to make sure that you are monitoring the correct method using DDMS.
    <ul>
      <li>Start the browser</li>
      <li>Check PID using
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell ps
</code></pre></div>        </div>
      </li>
      <li>Look for the same PID in the DDMS ‘Device’ tab.</li>
      <li>This is the method (Browser) you will be profiling.</li>
    </ul>
  </li>
  <li>Click on “Start method profiling”.</li>
  <li>Run the benchmarks.</li>
  <li>Click on “Stop method profiling”.</li>
  <li>This opens traceview which shows the ‘Exclusive’ and ‘Inclusive’ execution time of each method in the browser.</li>
  <li>This trace file can be saved for later reference.</li>
</ol>

<h4 id="flash-ics-stock-image-provided-by-bsquare-using-windows7">Flash ICS stock image provided by Bsquare using Windows7</h4>
<p>Refer procedure <a href="http://www.spencerpages.com/wiki/index.php?title=Dragonboard_8060_Development#Upgrading_to_the_Bsquare_Ice_Cream_Sandwich_Image_.28Windows_only.29">here</a> with the following changes:</p>

<p>After downloading ADT bundle start SDKManager.exe. It should load android sdk manager and show Install 1 package. Click install.</p>

<p>Usb driver will be installed in adt-bundle-windows-x86-20130219\sdk\extras\google\usb_driver
The folder .android is not in “documents and settings”. It is in C:\Users\.android
adb has moved to platform-tools.</p>

<h4 id="making-android-stock-browser-modifications">Making Android Stock browser modifications</h4>
<p>Once you have the source you may make changes and recompile source, then flash images or alternatively:</p>

<p>Pull stock browser for backup</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb pull /system/app/Browser.apk
</code></pre></div></div>
<p>Remove/Uninstall the stock browser using:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb remount
adb shell <span class="nb">rm</span> /system/app/Browser.apk
</code></pre></div></div>
<p>Do “adb reboot”
Install your browser using:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>APQ8060_ICS/out/target/product/msm8660_surf/system/app
adb push ./Browser.apk /system/app/
</code></pre></div></div>

<p>Profiling sunspider with DDMS/traceview will show major chunk on time being spent in sharedTimerFired which belongs in webkit package. The WebKit Java Bridge is in frameworks/base/core/java/android/webkit/Jwebcorejavabridge and in external/webkit/Source/WebKit/android/jni/JavaBridge.cpp. Changes to the timers are in external/webkit/Source/WebCore/platform/ThreadTimers.cpp.</p>

<p>The libraries, once compiled, will be found in out/target/product/msm8660_surf/system/lib. The perf tool showed major time being used by libv8.so and libwebcore.so. But a “ls -la” in the above directory shows libwebcore.so being updated after making changes to shared timer code. Hence push this file to /system/lib and also push the app Browser.apk</p>

<h4 id="makefile-to-compile-kmod-for-android-ics-source">Makefile to compile KMOD for Android ICS source</h4>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>KERNEL_BUILD :<span class="o">=</span> out/target/product/msm8660_surf/obj/KERNEL_OBJ/
KERNEL_CROSS_COMPILE :<span class="o">=</span> prebuilt/darwin-x86/toolchain/arm-eabi-4.4.3/bin/arm-eabi-

obj-m +<span class="o">=</span> 8x60_oc.o

all:
	make <span class="nt">-C</span> <span class="si">$(</span>KERNEL_BUILD<span class="si">)</span> <span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="si">$(</span>KERNEL_CROSS_COMPILE<span class="si">)</span> <span class="nv">M</span><span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span> modules

clean:
	make <span class="nt">-C</span> <span class="si">$(</span>KERNEL_BUILD<span class="si">)</span> <span class="nv">M</span><span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span> clean 2&gt; /dev/null
	<span class="nb">rm</span> <span class="nt">-f</span> modules.order <span class="k">*</span>~
</code></pre></div></div>

<h4 id="monitor-kernel-oops">Monitor Kernel oops</h4>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell
<span class="nb">cat</span> /proc/kmsg
</code></pre></div></div>

<h4 id="reboot-in-fastboot-if-mdp-refuses-to-boot-up">Reboot in fastboot if MDP refuses to boot up</h4>

<p>Disconnect all power and keep the 5 key pressed when you connect the power. Do “fastboot devices” to check for the MDP.</p>

<h4 id="permitting-apps-to-use-root">Permitting apps to use root</h4>
<p>Download SuperSU (the broker app which allows user apps to gain root access)</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget http://download.chainfire.eu/315/SuperSU/UPDATE-SuperSU-v1.25.zip
</code></pre></div></div>
<p>Extract the zip file. Push the Superuser.apk to /system/app</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb push Superuser.apk /system/app
</code></pre></div></div>
<p>Push the su binary to /system/bin</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb push su /system/bin
</code></pre></div></div>
<p>Make the binary owned by root</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell <span class="nb">chown </span>0.0 /system/bin/su
</code></pre></div></div>
<p>Make the binary executable, setuid, and setgid</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell <span class="nb">chmod </span>6755 /system/bin/su
</code></pre></div></div>
<p>Reboot the phone</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb reboot
</code></pre></div></div>
<p>Start SuperSU from the launcher</p>

<p>Launch SetCPU app and grant it su permissions. Then use it to increase CPU frequency or alternatively use:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell
<span class="nb">echo</span> <span class="s2">"performance"</span> <span class="o">&gt;</span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
</code></pre></div></div>

<h4 id="mount-ntfs-filesystem-on-ubuntu-with-read-writeexecution-permissions-in-case-you-wish-to-compile-on-external-drive">Mount NTFS filesystem on Ubuntu with read-write/execution permissions (In case you wish to compile on external drive)</h4>

<p>Insert/mount your do “sudo blkid” and note the device file for your disk “/dev/sdc1” (in my case).
unmount the disk</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> /media/harddisk
<span class="nb">sudo </span>mount <span class="nt">-t</span> ntfs <span class="nt">-o</span> <span class="nv">fmask</span><span class="o">=</span>0022,dmask<span class="o">=</span>0000,uid<span class="o">=</span>1000,gid<span class="o">=</span>1000 /dev/sdc1 /media/harddisk
</code></pre></div></div>

<h4 id="compiling-ics-from-source">Compiling ICS from source</h4>
<p>Follow all of the steps mentioned <a href="http://source.android.com/source/initializing.html">here</a>. Specifically the ones under Branch 4.0.x and previous since you will be compiling ICS.</p>

<p>Also follow the steps given at <a href="http://www.spencerpages.com/wiki/index.php?title=Dragonboard_8060_Development#Recreating_the_Ice_Cream_Sandwich_Source">Spencerpages</a> (do not use the fixes mentioned for errors in case you are on MAC)</p>

<p>We managed to compile the ICS source on two different platforms, Ubuntu 12.04 LTS (32-bit) and Mac OS X (10.8.3).</p>

<h4 id="compile-android-ics-on-ubuntu-1204-lts-32-bit">Compile Android ICS on Ubuntu 12.04 LTS (32-bit)</h4>

<p>Changes specific to Ubuntu 12.04 LTS (32-bit) are as follows:
After the Step 8 mentioned in “ Recreating the Ice Cream Sandwich” section in spencer pages, you might encounter the following errors:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error occurred during initialization of VM
make: <span class="k">***</span> <span class="o">[</span>out/target/common/obj/JAVA_LIBRARIES/core_intermediates/noproguard.classes-with-local.dex] Error 1
</code></pre></div></div>
<p>OR</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Could not create the Java virtual machine.
ERROR: signapk.jar failed: <span class="k">return </span>code 1
make: <span class="k">***</span> <span class="o">[</span>out/target/product/msm8660_surf/msm8660_surf-ota-eng.falcon.zip] Error 1
</code></pre></div></div>

<p><strong>Fix:</strong></p>

<p>Modify <code class="language-plaintext highlighter-rouge">build/core/definitions.mk</code>. On Line 1528 change Xmx to 1024M</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(if $(findstring windows,$(HOST_OS)),,-JXms16M -JXmx1024M)
</code></pre></div></div>
<p>In <code class="language-plaintext highlighter-rouge">build/tools/releasetools/common.py</code> change Xmx2048m to Xmx1024m at all occurrences</p>

<h4 id="compile-android-ics-on-mac-os-x-1083">Compile Android ICS on Mac OS X (10.8.3)</h4>

<p>The changes specific to compiling on OS X and those not presented in the two links at the top are mentioned here:</p>

<ol>
  <li>Grab the Mac OS X 10.5 SDK.
Most of the tools that are required will be installed when you grab the latest version of Xcode that is available. Also, do install the “Command Line Tools” from within Xcode.
For the 10.5 SDK, you need to register as an Apple Developer and Download an older version of Xcode that has the 10.5 SDK.
To add the SDK, I re-installed the MacOSX10.5.pkg from the Xcode 3.2.6 download. It is in a hidden folder named “Packages” on the disk image. After mounting the .dmg file, you can open it from the command line with open /Volumes/Xcode\ and\ iOS\ SDK/Packages/. When installing the package, choose change install location and option-click on the drive you want to install to, so that you can specify a folder. The target folder should be /Developer or the base of your Xcode 4 install if you have put it in a non-standard location.</li>
  <li>Get the “real” gcc.
You’ll get a llvm version of gcc with the Xcode Command Line tools install. But that doesn’t seem to like Cross Compilation too much. So, I would suggest get a gcc through macports and make it your default. I used gcc 4.7.</li>
  <li>Errors and their specific fixes:<br />
<strong>Error:</strong>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/external/elfutils/config-compat-darwin.h:42: error: static declaration of ‘strnlen’ follows non-static declaration
/usr/include/string.h:143: error: previous declaration of ‘strnlen’ was here
In file included from :0:
</code></pre></div>    </div>
    <p><strong>Fix:</strong>
 In external/elfutils/config-compat-darwin.h, the following built-in gcc preprocessor macro should take care of the strnlen redefinition problem from /usr/include/string.h on OS X &gt;= 10.7.</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> #if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ &lt; 1070
 static inline strneln(…) …
 #endif
</code></pre></div>    </div>
    <p><strong>Error:</strong></p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make: *** [out/host/darwin-x86/obj/EXECUTABLES/qemu-android-x86_intermediates/qemu-android-x86] Error 1
</code></pre></div>    </div>
    <p><strong>Fix:</strong>
Commenting out all lines in external/qemu/Android.mk<br />
<strong>Error:</strong></p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>host Executable: sqlite3 (out/host/darwin-x86/obj/EXECUTABLES/sqlite3_intermediates/sqlite3)
Undefined symbols for architecture i386:
“_sqlite3_androidopt_handle_pragma”, referenced from:
_sqlite3Pragma in sqlite3.o
_sqlite3Pragma in sqlite3.o
“_sqlite3_androidopt_open”, referenced from:
_openDatabase in sqlite3.o
_openDatabase in sqlite3.o
ld: symbol(s) not found for architecture i386
collect2: ld returned 1 exit status
make: *** [out/host/darwin-x86/obj/EXECUTABLES/sqlite3_intermediates/sqlite3] Error 1
</code></pre></div>    </div>
    <p><strong>Fix:</strong>
Patch the file android.mk using the patch attached. Android.mk is present in the folder external/sqlite/dist/Android.mk<br />
<strong>Error:</strong></p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Context*, void const*, unsigned long)in libRS.a(rsgApiReplay.o)
ld: symbol(s) not found for architecture i386
collect2: ld returned 1 exit status
make: *** [out/host/darwin-x86/obj/EXECUTABLES/a3dconvert_intermediates/a3dconvert] Error 1
</code></pre></div>    </div>
    <p><strong>Fix:</strong>
Patch the rsAllocation.cpp file using the supplied patch. rsAllocation.cpp is present in the folder
frameworks/base/libs/rs/rsAllocation.cpp<br />
<strong>Error:</strong>
elf.h file not found in two files</p>
    <ol>
      <li>APQ8060_ICS/kernel/scripts/mod/mk_elfconfig.c:4:17: fatal error: elf.h: No such file or directory</li>
      <li>APQ8060_ICS/kernel/scripts/mod/modpost.h:10:17: fatal error: elf.h: No such file or directory</li>
    </ol>

    <p><strong>Fix:</strong>
Follow Elefant – <a href="http://blog.csdn.net/elefant/article/details/7698586">http://blog.csdn.net/elefant/article/details/7698586</a><br />
Manually download elf.h from <a href="http://www.rockbox.org/tracker/9006?getfile=16683">http://www.rockbox.org/tracker/9006?getfile=16683</a><br />
Place it in the directory “kernel/scripts/mod”
Include the correct header file in the two files mk_elfconfig.c and modpost.h.
Do include “elf.h” instead of &lt;elh.h&gt;</p>
  </li>
</ol>]]></content><author><name></name></author><category term="Embedded Systems" /><summary type="html"><![CDATA[It has been quite some time since I participated in a competition (2010 was the last time @ FSG). I had been waiting for the XCDC2013 and what an amazing experience it was!!!]]></summary></entry><entry><title type="html">An Overview of Scheduling Policies Targeted at Improving Performance/Efficiency in Multi-cores</title><link href="https://k45v.github.io/blog/2013/scheduling/" rel="alternate" type="text/html" title="An Overview of Scheduling Policies Targeted at Improving Performance/Efficiency in Multi-cores" /><published>2013-03-10T00:00:00+00:00</published><updated>2013-03-10T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2013/scheduling</id><content type="html" xml:base="https://k45v.github.io/blog/2013/scheduling/"><![CDATA[]]></content><author><name></name></author><category term="Papers" /><category term="Parallel Computing" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Install TinyOS 2.1.2 on Ubuntu 12.04 and blink LEDs on TelosB mote</title><link href="https://k45v.github.io/blog/2013/tinyos/" rel="alternate" type="text/html" title="Install TinyOS 2.1.2 on Ubuntu 12.04 and blink LEDs on TelosB mote" /><published>2013-02-22T00:00:00+00:00</published><updated>2013-02-22T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2013/tinyos</id><content type="html" xml:base="https://k45v.github.io/blog/2013/tinyos/"><![CDATA[<div class="float-left mr-3 w-50">
  <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/img_2387-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/img_2387-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/img_2387-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/img_2387.jpg" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

</div>
<p>Recently I got my hands on the TelosB mote and as the tradition goes, I had to test blinking LEDs on it. (If you want to compare this mote with few others out there then this is a <a href="http://www.vsrdjournals.com/EEC/Issue/2012_02_Feb/Web/3_Vini_Madan_582_Review_Article_Feb_2012.pdf">good paper to refer</a>).</p>

<p>Initially, I went to the TinyOS <a href="http://docs.tinyos.net/tinywiki/index.php/Getting_started">getting started</a> page which provides instructions for <a href="http://docs.tinyos.net/tinywiki/index.php/Installing_TinyOS_2.1.1#Two-step_install_on_your_host_OS_with_Debian_packages">installing TinyOS 2.1.1</a>. It had few steps missing and one can run “tos-check-env” and google for the errors which show up. However, when I went on to make the blinking LED project (make telosb), it spewed out a host of errors similar to this line “/opt/tinyos-2.1.1/tos/platforms/telosa/PlatformLedsC.nc:54: cannot find `Port56′”. Apparently the msp430 packages did not jive with this TinyOS version 2.1.1 and multiple posts online suggested rolling back to legacy versions.</p>

<p>I decided to give TinyOS 2.1.2 a shot and it worked!!! So well here is the entire procedure for you:</p>

<ol>
  <li>Remove brltty package to avoid FTDI to serial conflicts
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get autoremove brltty
</code></pre></div>    </div>
    <p>Make sure you have the build-essentials package</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>build-essential
</code></pre></div>    </div>
  </li>
  <li>Execute the following command,
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /etc/apt/sources.list
</code></pre></div>    </div>
    <p>Hit “G” to go to end of file and then hit “A”. Paste the line given below at the end of this file</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>add deb http://tinyos.stanford.edu/tinyos/dists/ubuntu lucid main
</code></pre></div>    </div>
    <p>In case you had previous repositories for TinyOS in source, then remove them.
Hit ESC, then enter “:wq” to save and quit</p>
  </li>
  <li>Now install TinyOS 2.1.2 using
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>tinyos-2.1.2
</code></pre></div>    </div>
  </li>
  <li>Now you need to configure the environment for TinyOS. Do
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi ~/.bashrc
</code></pre></div>    </div>
    <p>Add the lines given below at the end of this file</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Sourcing the tinyos environment variable setup script</span>
<span class="nb">source</span> /opt/tinyos-2.1.2/tinyos.sh
<span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$CLASSPATH</span>:.
</code></pre></div>    </div>
    <p>Create the setup script using:</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /opt/tinyos-2.1.2/tinyos.sh
</code></pre></div>    </div>
    <p>Now enter the following contents into this file (use “i” to insert, ctrl+shift+v to paste)</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /usr/bin/env bash</span>
<span class="c"># Here we setup the environment</span>
<span class="c"># variables needed by the tinyos </span>
<span class="c"># make system</span>
   
<span class="c"># echo "Setting up for TinyOS 2.1.2"</span>
<span class="nb">export </span><span class="nv">TOSROOT</span><span class="o">=</span>
<span class="nb">export </span><span class="nv">TOSDIR</span><span class="o">=</span>
<span class="nb">export </span><span class="nv">MAKERULES</span><span class="o">=</span>
   
<span class="nv">TOSROOT</span><span class="o">=</span><span class="s2">"/opt/tinyos-2.1.2"</span>
<span class="nv">TOSDIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOSROOT</span><span class="s2">/tos"</span>
<span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$CLASSPATH</span>:<span class="nv">$TOSROOT</span>/support/sdk/java:<span class="nv">$TOSROOT</span>/support/sdk/java/tinyos.jar
<span class="nv">MAKERULES</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOSROOT</span><span class="s2">/support/make/Makerules"</span>
   
<span class="nb">export </span>TOSROOT
<span class="nb">export </span>TOSDIR
<span class="nb">export </span>CLASSPATH
<span class="nb">export </span>MAKERULES
</code></pre></div>    </div>
    <p>Run the command below to allow this script to execute</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chmod </span>755 /opt/tinyos-2.1.2/tinyos.sh
</code></pre></div>    </div>
  </li>
  <li>Now close and start a new terminal or alternatively
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc
</code></pre></div>    </div>
  </li>
  <li>Run the command
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tos-check-env
</code></pre></div>    </div>
    <p>If it gives warnings related to Java version then do</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-version</span>
</code></pre></div>    </div>
    <p>If your version is above 1.5, then ignore this warning else upgrade to a newer java version. Ignore the warning related to graphviz.</p>
  </li>
  <li>Now insert Telos mote in your USB slot. You may run the command
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>motelist
</code></pre></div>    </div>
    <p>to check if it was detected. The output will be</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$motelist</span>
Reference  Device           Description
<span class="nt">----------</span> <span class="nt">----------------</span> <span class="nt">---------------------------------------------</span>
M49WC0OT   /dev/ttyUSB0     Moteiv tmote sky
</code></pre></div>    </div>
    <p>Allow writing to the USB port using (substitute your device name as per the previous output)</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chmod </span>666 /dev/ttyUSB0
</code></pre></div>    </div>
    <p>Navigate to the blinking led project folder</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>bash
<span class="nb">cd</span> /opt/tinyos-2.1.2/apps/Blink
</code></pre></div>    </div>
    <p>Execute the command below and the code should get compiled</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make telosb
</code></pre></div>    </div>
    <p>Install the blinking LED application on the mote using</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make telosb reinstall
</code></pre></div>    </div>
    <p>The command above assumes you have only one Telos mote on USB. Else use the command</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make telosb reinstall bsl,/dev/ttyUSB0
</code></pre></div>    </div>
    <p>You should see the LEDs come to life.</p>
  </li>
</ol>

<p>References: <a href="http://docs.tinyos.net/tinywiki/index.php/Main_Page">TinyOS Documentation</a></p>]]></content><author><name></name></author><category term="Embedded Systems" /><summary type="html"><![CDATA[Recently I got my hands on the TelosB mote and as the tradition goes, I had to test blinking LEDs on it. (If you want to compare this mote with few others out there then this is a good paper to refer).]]></summary></entry><entry><title type="html">Top 10 things I did after installing Ubuntu 12.04 LTS alongside Windows7</title><link href="https://k45v.github.io/blog/2013/ubuntu/" rel="alternate" type="text/html" title="Top 10 things I did after installing Ubuntu 12.04 LTS alongside Windows7" /><published>2013-01-18T00:00:00+00:00</published><updated>2013-01-18T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2013/ubuntu</id><content type="html" xml:base="https://k45v.github.io/blog/2013/ubuntu/"><![CDATA[<p>I installed Ubuntu on my computer a few years ago, and then… I installed it again 🙂</p>

<p>I like to have both Ubuntu and Windows on my system (Dual boot). Here is the list of things I usually do to setup Ubuntu, on a computer which already has a Windows OS :-</p>

<ol>
  <li>
    <p>While logged in Windows, create disk space for Ubuntu using <a href="http://www.partition-tool.com/download.htm">EaseUs partition Manager</a> (anywhere between 25-40GB of disk space should be good). The free space will be shown as unallocated space.</p>
  </li>
  <li>
    <p>Create a <a href="http://www.ubuntu.com/download/help/create-a-usb-stick-on-windows">bootable USB stick</a> for the version on Ubuntu which you want to install. Boot from it  (restart windows and hit ESC or F12 to select USB as your boot device) and select “Install beside Windows7”. (it will automatically detect the unallocated space you had created)</p>
  </li>
  <li>Now run the following commands from terminal (launch terminal using ctrl+alt+t):
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt-get upgrade
</code></pre></div>    </div>
    <p>This updates the Ubuntu repositories.</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>vim
</code></pre></div>    </div>
    <p>This installs Vim text editor (extremely powerful tool to use while coding)</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository <span class="s2">"deb http://archive.canonical.com/ </span><span class="si">$(</span>lsb_release <span class="nt">-sc</span><span class="si">)</span><span class="s2"> partner"</span>
<span class="nb">sudo </span>apt-get update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt-get <span class="nb">install </span>skype
</code></pre></div>    </div>
    <p>This installs Skype</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>p7zip-full
</code></pre></div>    </div>
    <p>This installs 7zip (compression/uncompression tool)</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>gparted
</code></pre></div>    </div>
    <p>The gparted partition tool</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>ubuntu-restricted-extras
</code></pre></div>    </div>
    <p>This allows Ubuntu to play file formats like mp3, avi, etc.</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>lo-menubar
</code></pre></div>    </div>
    <p>This gives global menu for Libre office</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository ppa:diesch/testing
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>unsettings
</code></pre></div>    </div>
    <p>An application to tweak the Ubuntu 12.04 which has Reset to Default option.</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository ppa:ubuntu-wine/ppa
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>wine1.4
<span class="nb">sudo </span>apt-get <span class="nb">install </span>winetricks
</code></pre></div>    </div>
    <p>This installs Wine 1.4 (stable) which allows you to use windows applications.</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository ppa:mozillateam/thunderbird-stable
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>thunderbird
</code></pre></div>    </div>
    <p>Install the Mozilla Thunderbird email client</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository ppa:yannubuntu/boot-repair
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> boot-repair
</code></pre></div>    </div>
    <p>This installs boot-repair, a handy tool to fix any bootloader problems</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>gedit-plugins
</code></pre></div>    </div>
    <p>Now you may launch gedit and go to → edit → preferences → plugins → now select the plugins as per your requirement.</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>openjdk-7-jdk icedtea-7-plugin
</code></pre></div>    </div>
    <p>JDK is needed for applications requiring Java support</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>nautilus-open-terminal
nautilus <span class="nt">-q</span> <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>1 <span class="o">&amp;&amp;</span> nautilus <span class="nt">-n</span>
</code></pre></div>    </div>
    <p>This installs the nautilus open in terminal feature, which you’ll find useful once you start frequently using Ubuntu.
If using a laptop:</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository ppa:webupd8team/jupiter
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>jupiter
</code></pre></div>    </div>
    <p>Install Jupiter, the power management client which can help enhance your battery life!</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>powertop
</code></pre></div>    </div>
    <p>Another utility for power management, launch after install using</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>powertop
</code></pre></div>    </div>
    <p>Then use arrow keys to move to the tunable tab and use ENTER key to adjust parameters to good, then exit using ESC.</p>
  </li>
  <li>
    <p>Launch the Ubuntu Software Center from Unity Dash and search and install the following: GIMP Image Editor, VLC media player, Synaptic Package Manager, Wine, Okular (similar to Foxit pdf reader for windows, allows comments and highlighting), redshift.</p>
  </li>
  <li>
    <p>Launch firefox and search and install (using double click) <a href="https://www.google.com/intl/en/chrome/browser/">Google chrome</a> since Flash is not supported in firefox.</p>
  </li>
  <li>Re-enable hibernate using following commands (note that your swap memory should be equal to RAM):
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudoedit /etc/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla
</code></pre></div>    </div>
    <p>Right click and paste the following in the file opened:</p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Re-enable hibernate by default]
<span class="nv">Identity</span><span class="o">=</span>unix-user:<span class="k">*</span>
<span class="nv">Action</span><span class="o">=</span>org.freedesktop.upower.hibernate
<span class="nv">ResultActive</span><span class="o">=</span><span class="nb">yes</span>
</code></pre></div>    </div>
    <p>Hit ESC to go into command mode and then type :wq to save and quit. Restart your computer and you should see Hibernate as one of the options.</p>
  </li>
  <li>
    <p>Open your Home folder and then do → view → status bar</p>
  </li>
  <li>
    <p>Modify privacy under system settings, then change Icon size and wallpaper under appearance.</p>
  </li>
  <li>
    <p>Under System Settings select Keyboard → Shortcuts → custom shortcuts → +
Name: Kill Processes     Command: gnome-system-monitor
Click apply. Now click on disabled and then ctrl + alt + k . This is your shortcut to launch the system monitor.</p>
  </li>
  <li>(For Acer aspire 5738z) In your chrome browser go to <a href="https://help.ubuntu.com/community/AspireTimeline/Fixes">https://help.ubuntu.com/community/AspireTimeline/Fixes</a> and apply Touchpad On/Off fix given for 9.10. Then add acpi_backlight=vendor after splash to enable brightness control, change timeout, save and do sudo update-grub.</li>
</ol>

<p>[Advanced] For displaying only current directory in terminal and not the entire path:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.bashrc
</code></pre></div></div>
<p>Find the lines</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">else
    </span><span class="nv">PS1</span><span class="o">=</span><span class="s1">'${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '</span>
<span class="k">fi</span>
</code></pre></div></div>
<p>and change the w to W.</p>

<p>If you are installing Ubuntu as a VM and need to share folders then <a href="http://ubuntuexperiment.wordpress.com/2008/11/12/sharing-folders-between-host-and-guest-os-in-virtualbox/">this is a good link</a> to refer. Also install guest utils using before attempting to mount.</p>

<p>sudo apt-get install virtualbox-ose-guest-utils</p>

<p>P.S: Some information drawn from <a href="http://www.techdrivein.com/2012/06/25-things-i-did-after-installing-ubuntu.html">techdrivein</a> and <a href="http://www.noobslab.com/2012/04/important-things-to-do-after-install_26.html">noobslab</a></p>]]></content><author><name></name></author><category term="Linux" /><summary type="html"><![CDATA[I installed Ubuntu on my computer a few years ago, and then… I installed it again 🙂]]></summary></entry><entry><title type="html">The MOESISm (MOESIF) cache coherence protocol</title><link href="https://k45v.github.io/blog/2012/MOESISm/" rel="alternate" type="text/html" title="The MOESISm (MOESIF) cache coherence protocol" /><published>2012-10-31T00:00:00+00:00</published><updated>2012-10-31T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2012/MOESISm</id><content type="html" xml:base="https://k45v.github.io/blog/2012/MOESISm/"><![CDATA[<p>In one of the courses I took this semester, we were asked to modify an existing invalidation based cache coherence protocol to reduce the off-chip Bandwidth usage. The motivation for this problem statement was limited off-chip bandwidth due to constrained number of pins that a chip can have.</p>

<p>Initially I had used the given benchmarks to determine off-chip bandwidth usage for MSI, MESI and MOESI protocols and among them, MESI seemed to perform the best. The MOESI protocol, in spite of having fewer writebacks (because it allows dirty sharing) lost out on cache-to-cache transfers because the shared state is not allowed to Flush. Hence, although MOESI accounts for Flush in a read after write operation ( ‘M’ to ‘O’ state transition and ‘O’ can Flush), a read after read will cause a block to be brought in from memory (on a miss) even if the cache on same level has a copy. In order to accommodate this request I decided to introduce a new state namely ‘Sm’ (shared master, which I later found to be similar to the Forward state in Intel MESIF protocol) and the results were quite interesting. Below is the explanation for the MOESISm protocol: (the terminology is based on what had been taught in class)</p>

<p>Processor requests to the cache:</p>
<ul>
  <li>PrRd: Processor request to read to a cache block</li>
  <li>PrWr: Processor request to write to a cache block</li>
</ul>

<p>Bus-side requests:</p>
<ul>
  <li>BusRd: Snooped request that some other processor has requested to read a cache block</li>
  <li>BusRdX: Snooped request that some other processor has requested a read exclusive (write) to a cache block. The requesting processor does not have the block yet.</li>
  <li>BusUpgr: Snooped request that some other processor has requested a write to a cache block that it already has.</li>
  <li>Flush: Snooped request that indicates that entire cache block has been placed on the bus for cache to cache transfer</li>
  <li>FlushOpt: Snooped request that indicates that entire cache block has been placed on the bus for cache to cache transfer. It’s called FlushOpt because  it offers performance enhancement and it is not really a correctness requirement.</li>
</ul>

<p><strong>NOTE:</strong> For a BusRd transaction, if a copy is found by other snoopers, they assert the COPIES-EXIST line (C) else the line is low (!C).</p>

<div class="text-center">
  <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/proc_init-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/proc_init-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/proc_init-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/proc_init.jpg" class="img-fluid rounded w-75" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Processor Side</figcaption>

</figure>

  <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bus_init-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bus_init-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bus_init-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/bus_init.jpg" class="img-fluid rounded w-75" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Bus Side</figcaption>

</figure>

</div>

<p>For the processor side, the state diagram uses the notation Processor_request/Resulting_bus_transaction and for the bus side it is snooped_transaction/resulting_action.</p>

<p>The advantages of this protocol??? Well it allows dirty sharing and reduces traffic due to writebacks. It saves power when compared to MESI protocol. How? Well in case of MESI, the FlushOpt is generated by multiple caches in ‘S’ state, but only one is selected for cache-to-cache transfer. So, power is spent in reading the cache, trying to obtain bus access and then cancelling it when a cache senses that someone else has supplied the block earlier. This is avoided because FlushOpt will only be sent by the cache block in ‘Sm’ state. Hence, read after read requests will also get cache-to-cache transfers. The resulting off-chip bandwidth usage was the least for the same benchmark using MOESISm protocol.Yayyy!!!</p>

<p>The only drawback which I can notice for this protocol is that, for MESIF the ‘F’ state migrates to a newer copy as <a href="http://www.realworldtech.com/common-system-interface/5/">mentioned here</a> and the newer copy has lesser chances of getting evicted (temporal locality). However, in the protocol I have suggested, the migration of ‘Sm’ state is not possible because with the current hardware we only have one Copies exists line. Now, if the newer copy has to go into ‘Sm’ state, then the older copy may either be in ‘E’ state OR in ‘O’ state OR in ‘Sm’ state. Here, all these intial states should transition into ‘S’ state but if the ‘O’ state moves into ‘S’ state then what happens to the writeback??? Well, I guess if we change the protocol so that the ‘O’ state performs a writeback when it moves into ‘S’ state, then this can be achieved. I just thought of this last part now 😀 I guess blogging really helps!!!</p>]]></content><author><name></name></author><category term="Parallel Computing" /><summary type="html"><![CDATA[In one of the courses I took this semester, we were asked to modify an existing invalidation based cache coherence protocol to reduce the off-chip Bandwidth usage. The motivation for this problem statement was limited off-chip bandwidth due to constrained number of pins that a chip can have.]]></summary></entry><entry><title type="html">Resizing the Ubuntu paritition in a Dual Boot Windows7 and Ubuntu 12.04 system</title><link href="https://k45v.github.io/blog/2012/resize-ubuntu/" rel="alternate" type="text/html" title="Resizing the Ubuntu paritition in a Dual Boot Windows7 and Ubuntu 12.04 system" /><published>2012-08-29T00:00:00+00:00</published><updated>2012-08-29T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2012/resize-ubuntu</id><content type="html" xml:base="https://k45v.github.io/blog/2012/resize-ubuntu/"><![CDATA[<p>I have a Dual boot system (Ubuntu 12.04 LTS and Windows7) with the GRUB as my bootloader. Lately, I have been using a lot of tools offered for Linux and I wanted to expand the partition size for my Ubuntu. I remember the last time when I tried to do this, using a partition manager in Windows; It did not end well. So this time I tried a different approach and it proved to be so easy that I decided to document it.</p>

<ol>
  <li>Boot into your Ubuntu OS. Then download the Ubuntu image file from <a href="http://www.ubuntu.com/download/desktop">here</a>. It would be an “ISO” file.</li>
</ol>
<div class="text-center">
  <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/download_ubuntu-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/download_ubuntu-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/download_ubuntu-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/download_ubuntu.jpg" class="img-fluid rounded w-75" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

  </div>

<ol start="2">
  <li>
    <p>Create a bootable USB stick using the instructions given <a href="http://www.ubuntu.com/download/help/create-a-usb-stick-on-ubuntu">here</a></p>
  </li>
  <li>
    <p>Restart your PC and hit Esc or F12 (whatever takes you into boot menu) and select boot from USB device.</p>
  </li>
  <li>Click on Try Ubuntu. Now install gparted using the command below:
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt-get <span class="nb">install </span>gparted
</code></pre></div>    </div>
  </li>
  <li>
    <p>Resize the windows partition which is at the end of the Windows file system to create un-allocated free space(in my case the partition did not hold the OS).</p>
  </li>
  <li>
    <p>Resize the Ubuntu partition to use the created free space. (Now, GRUB stage 1 is no longer at the beginning of the parition).</p>
  </li>
  <li>
    <p>Apply changes. It should take roughly 1.5min per GB of space allotted.</p>
  </li>
  <li>Now use Boot repair to fix the problems in the GRUB Bootloader (Instructions were borrowed from <a href="http://www.howtogeek.com/114884/how-to-repair-grub2-when-ubuntu-wont-boot/">How-To Geek</a>) :
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository ppa:yannubuntu/boot-repair
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> boot-repair
boot-repair
</code></pre></div>    </div>
    <p>Click on recommended repair.</p>
  </li>
  <li>Restart your computer and enjoy the expanded disk space in your Ubuntu OS.</li>
</ol>
<div class="text-center">
<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/resize_ubuntu-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/resize_ubuntu-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/resize_ubuntu-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/resize_ubuntu.jpg" class="img-fluid rounded w-75" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

</div>]]></content><author><name></name></author><category term="Linux" /><summary type="html"><![CDATA[I have a Dual boot system (Ubuntu 12.04 LTS and Windows7) with the GRUB as my bootloader. Lately, I have been using a lot of tools offered for Linux and I wanted to expand the partition size for my Ubuntu. I remember the last time when I tried to do this, using a partition manager in Windows; It did not end well. So this time I tried a different approach and it proved to be so easy that I decided to document it.]]></summary></entry><entry><title type="html">Soldering Pointers</title><link href="https://k45v.github.io/blog/2011/soldering/" rel="alternate" type="text/html" title="Soldering Pointers" /><published>2011-04-11T00:00:00+00:00</published><updated>2011-04-11T00:00:00+00:00</updated><id>https://k45v.github.io/blog/2011/soldering</id><content type="html" xml:base="https://k45v.github.io/blog/2011/soldering/"><![CDATA[<div class="float-right w-25">
  <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/soldering-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/soldering-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/soldering-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/soldering.jpg" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

</div>
<p>Pointers to keep in mind while soldering:</p>

<ol>
  <li>
    <p>Set temperature to 320°C (608°F). (if you have some experience, else bring it down to about 270°C)</p>
  </li>
  <li>
    <p>After real temperature reaches the set temperature, use a damp sponge to
clean the tip and check for damages. The sponge also helps in thermally shocking the iron, i.e. forces the iron into maximum heat cycle.</p>
  </li>
  <li>
    <p>If you have brass wool or metal brushes on your solder stand then use them for cleaning instead of the sponge, since tiny blobs of solder might get trapped in the sponge and start accumulating at the bottom.</p>
  </li>
  <li>
    <p>If the tip has oxidation, apply solder and wipe using the damp sponge, repeat these steps until oxidation is removed.</p>
  </li>
  <li>
    <p>Apply some soldering flux to get better finish (also useful when desoldering)</p>
  </li>
  <li>
    <p>After cleaning, coat tip with a layer of solder and set it aside ready for the
next usage. You may leave a lump of solder on the tip, this helps the tip last much longer.</p>
  </li>
  <li>
    <p>If the tip shows dis-figuration or has rust on it. Change the tip.</p>
  </li>
  <li>
    <p><strong>Tinning:</strong> Tin wire NOT till the insulation but till 1.6mm before insulation as bending might cause breakage of insulation!!!</p>
  </li>
  <li>
    <p>Take care so as not to damage the meniscus of ceramic/button capacitors.</p>
  </li>
  <li>
    <p>Use wood/toothpick to hold down wires in board repair</p>
  </li>
  <li>
    <p>SMD soldering simplified <a href="http://www.sparkfun.com/tutorials/category/2">http://www.sparkfun.com/tutorials/category/2</a></p>
  </li>
  <li>
    <p>Always check your work using a magnifying glass (Better safe than sorry).</p>
  </li>
</ol>]]></content><author><name></name></author><category term="Circuit Design" /><summary type="html"><![CDATA[Pointers to keep in mind while soldering:]]></summary></entry></feed>